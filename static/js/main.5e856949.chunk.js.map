{"version":3,"sources":["components/MyEditor.js","components/GlobalStyles.js","components/Themes.js","App.js","reportWebVitals.js","index.js"],"names":["MyEditor","id","useParams","useState","convertedText","setConvertedText","theme","value","onChange","style","minHeight","GlobalStyles","createGlobalStyle","body","text","lightTheme","toggleBorder","background","darkTheme","App","setTheme","className","onClick","basename","process","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAoBeA,EAfE,WACf,IAAQC,EAAOC,cAAPD,GACR,EAA0CE,mBAASF,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,OACE,8BACE,cAAC,IAAD,CACEC,MAAM,OACNC,MAAOH,GAAiB,GACxBI,SAAUH,EACVI,MAAO,CAAEC,UAAW,c,gBCZfC,EAAeC,YAAH,uLAEP,qBAAGN,MAAkBO,QAC1B,qBAAGP,MAAkBQ,QCLrBC,EAAa,CACxBF,KAAM,OACNC,KAAM,UACNE,aAAc,OACdC,WAAY,WAGDC,EAAY,CACvBL,KAAM,UACNC,KAAM,UACNE,aAAc,UACdC,WAAY,QCyBCE,MA3Bf,WACE,MAA0BhB,mBAAS,QAAnC,mBAAOG,EAAP,KAAcc,EAAd,KAIA,OACE,cAAC,IAAD,CAAed,MAAiB,UAAVA,EAAoBS,EAAaG,EAAvD,SACE,qCACE,cAACP,EAAD,IACA,qBAAKU,UAAU,SAAf,SACE,wBAAQC,QARK,WACCF,EAAV,UAAVd,EAA6B,OAAmB,UAO1C,4BAEF,cAAC,IAAD,CAAQiB,SAAUC,GAAlB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,OAAZ,SACE,cAAC,EAAD,iBCfCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5e856949.chunk.js","sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\n\nconst MyEditor = () => {\n  const { id } = useParams();\n  const [convertedText, setConvertedText] = useState(id);\n  return (\n    <div>\n      <ReactQuill\n        theme=\"snow\"\n        value={convertedText || \"\"}\n        onChange={setConvertedText}\n        style={{ minHeight: \"100vh\" }}\n      />\n    </div>\n  );\n};\n\nexport default MyEditor;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n    transition: all 0.50s linear;\n  }\n  `;\n","export const lightTheme = {\n  body: \"#FFF\",\n  text: \"#363537\",\n  toggleBorder: \"#FFF\",\n  background: \"#363537\",\n};\n\nexport const darkTheme = {\n  body: \"#363537\",\n  text: \"#FAFAFA\",\n  toggleBorder: \"#6B8096\",\n  background: \"#999\",\n};\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport MyEditor from \"./components/MyEditor\";\n\n// For Theme\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyles } from \"./components/GlobalStyles\";\nimport { lightTheme, darkTheme } from \"./components/Themes\";\n\nfunction App() {\n  const [theme, setTheme] = useState(\"dark\");\n  const themeToggler = () => {\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n  };\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <>\n        <GlobalStyles />\n        <div className=\"Header\">\n          <button onClick={themeToggler}>Switch Theme</button>\n        </div>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route exact path=\"/\">\n              <MyEditor />\n            </Route>\n            <Route path=\"/:id\">\n              <MyEditor />\n            </Route>\n          </Switch>\n        </Router>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}