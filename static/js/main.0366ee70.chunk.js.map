{"version":3,"sources":["components/MonacoEditor.js","components/TopAppBar.js","components/BottomAppBar.js","components/GlobalStyles.js","components/Themes.js","App.js","reportWebVitals.js","index.js"],"names":["MEditor","props","curTheme","id","useParams","theme","height","defaultLanguage","defaultValue","colorDecorators","useStyles","makeStyles","root","position","bottom","spacing","right","minHeight","centerItems","justifyContent","urlEdit","marginLeft","paddingBottom","ScrollTop","children","window","classes","trigger","useScrollTrigger","target","undefined","disableHysteresis","threshold","Zoom","in","onClick","event","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","className","BackToTop","useState","icon","setIcon","url","setUrl","Fragment","CssBaseline","AppBar","style","background","color","Toolbar","Typography","variant","FormControl","InputLabel","htmlFor","Input","type","value","onChange","e","console","log","endAdornment","InputAdornment","IconButton","Button","toggle","Fab","size","appBar","top","toolbar","BottomAppBar","to","GlobalStyles","createGlobalStyle","body","text","lightTheme","toggleBorder","darkTheme","App","localTheme","localStorage","getItem","setTheme","basename","process","setItem","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0366ee70.chunk.js","sourcesContent":["import Editor from \"@monaco-editor/react\";\nimport { useParams } from \"react-router-dom\";\nexport default function MEditor(props) {\n  const curTheme = props.curTheme;\n  const { id } = useParams();\n\n  return (\n    <Editor\n      theme={curTheme === \"light\" ? \"light\" : \"vs-dark\"}\n      height=\"88vh\"\n      defaultLanguage=\"javascript\"\n      defaultValue={id ? \"content from \" + id : \"//Enter text\"}\n      colorDecorators=\"true\"\n    />\n  );\n}\n","import React from \"react\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { useState } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport Fab from \"@material-ui/core/Fab\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport Zoom from \"@material-ui/core/Zoom\";\nimport { Button } from \"@material-ui/core\";\nimport NightsStayIcon from \"@material-ui/icons/NightsStay\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Input from \"@material-ui/core/Input\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"fixed\",\n    bottom: theme.spacing(1),\n    right: theme.spacing(2),\n    minHeight: \"10px\",\n  },\n  centerItems: {\n    justifyContent: \"space-between\",\n  },\n  urlEdit: {\n    justifyContent: \"center\",\n    marginLeft: \"500px\",\n    paddingBottom: \"15px\",\n  },\n}));\n\nfunction ScrollTop(props) {\n  const { children, window } = props;\n  const classes = useStyles();\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({\n    target: window ? window() : undefined,\n    disableHysteresis: true,\n    threshold: 100,\n  });\n\n  const handleClick = (event) => {\n    const anchor = (event.target.ownerDocument || document).querySelector(\n      \"#back-to-top-anchor\"\n    );\n\n    if (anchor) {\n      anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n    }\n  };\n\n  return (\n    <Zoom in={trigger}>\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\n        {children}\n      </div>\n    </Zoom>\n  );\n}\n\nexport default function BackToTop(props) {\n  const curTheme = props.curTheme;\n  // 0 = white, 1 = dark\n  const [icon, setIcon] = useState(curTheme === \"dark\");\n  const [url, setUrl] = useState(\"\");\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar style={{ background: \"inherit\", color: \"inherit\" }}>\n        <Toolbar className={classes.centerItems}>\n          <Typography variant=\"h6\">StagBIN</Typography>\n          <FormControl>\n            <InputLabel htmlFor=\"custom-url\">URL</InputLabel>\n            <Input\n              id=\"custom-url\"\n              type=\"text\"\n              value={url}\n              onChange={(e) => {\n                console.log(e.target.value);\n                setUrl(e.target.value);\n              }}\n              style={{ color: \"inherit\" }}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"cop\"\n                    // onClick={handleClickShowPassword}\n                    // onMouseDown={handleMouseDownPassword}\n                  ></IconButton>\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n          <Button\n            color=\"inherit\"\n            onClick={() => {\n              props.toggle();\n              setIcon(!icon);\n            }}\n          >\n            {icon ? <WbSunnyIcon /> : <NightsStayIcon />}\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <Toolbar id=\"back-to-top-anchor\" />\n      <ScrollTop {...props}>\n        <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\n          <KeyboardArrowUpIcon />\n        </Fab>\n      </ScrollTop>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    bottom: 0,\n    top: \"auto\",\n  },\n  toolbar: {\n    minHeight: \"30px\",\n  },\n}));\n\nexport default function BottomAppBar() {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        style={{ background: \"inherit\", color: \"inherit\" }}\n        className={classes.appBar}\n      >\n        <Toolbar className={classes.toolbar}>\n          <Link to=\"/\" className=\"navbar-brand\" style={{ color: \"inherit\" }}>\n            <small>&copy; Copyright 2021, vjspranav</small>\n          </Link>{\" \"}\n        </Toolbar>\n      </AppBar>\n    </React.Fragment>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n    transition: all 0.50s linear;\n  }\n  `;\n","export const lightTheme = {\n  body: \"#FFF\",\n  text: \"#363537\",\n  toggleBorder: \"#FFF\",\n  background: \"#363537\",\n};\n\nexport const darkTheme = {\n  body: \"#363537\",\n  text: \"#FAFAFA\",\n  toggleBorder: \"#6B8096\",\n  background: \"#999\",\n};\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { useState } from \"react\";\n// import MyEditor from \"./components/MyEditor\";\n// import TopBar from \"./components/Topbar\";\n// import BottomBar from \"./components/BottomBar\";\nimport MEditor from \"./components/MonacoEditor\";\nimport TopAppBar from \"./components/TopAppBar\";\nimport BottomAppBar from \"./components/BottomAppBar\";\n\n// For Theme\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyles } from \"./components/GlobalStyles\";\nimport { lightTheme, darkTheme } from \"./components/Themes\";\n\nfunction App() {\n  let localTheme = localStorage.getItem(\"theme\");\n  const [theme, setTheme] = useState(localTheme ? localTheme : \"light\");\n  const themeToggler = () => {\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n    localStorage.setItem(\"theme\", theme === \"light\" ? \"dark\" : \"light\");\n  };\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <>\n        <GlobalStyles />\n        <div className=\"App\" style={{}}>\n          <Router basename={process.env.PUBLIC_URL}>\n            <div>\n              <TopAppBar toggle={themeToggler} curTheme={theme} />\n            </div>\n            <Switch>\n              <Route exact path=\"/\">\n                <MEditor curTheme={theme} />\n              </Route>\n              <Route path=\"/:id\">\n                <MEditor curTheme={theme} />\n              </Route>\n            </Switch>\n            <div>\n              <BottomAppBar curTheme={theme} />\n            </div>\n          </Router>\n        </div>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}