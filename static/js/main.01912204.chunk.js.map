{"version":3,"sources":["components/MyEditor.js","components/TopAppBar.js","components/BottomAppBar.js","components/GlobalStyles.js","components/Themes.js","App.js","reportWebVitals.js","index.js"],"names":["MyEditor","id","useParams","useState","convertedText","setConvertedText","theme","value","onChange","useStyles","makeStyles","root","position","bottom","spacing","right","minHeight","ScrollTop","props","children","window","classes","trigger","useScrollTrigger","target","undefined","disableHysteresis","threshold","Zoom","in","onClick","event","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","className","BackToTop","curTheme","icon","setIcon","Fragment","CssBaseline","AppBar","color","Toolbar","Typography","variant","Button","style","toggle","Fab","size","appBar","top","toolbar","BottomAppBar","to","GlobalStyles","createGlobalStyle","body","text","lightTheme","toggleBorder","background","darkTheme","App","localTheme","localStorage","getItem","setTheme","paddingBottom","basename","process","setItem","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.01912204.chunk.js","sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"react-quill/dist/quill.bubble.css\";\n\nconst MyEditor = () => {\n  const { id } = useParams();\n  const [convertedText, setConvertedText] = useState(id);\n  return (\n    <div>\n      <ReactQuill\n        theme=\"bubble\"\n        value={convertedText || \"\"}\n        onChange={setConvertedText}\n      />\n    </div>\n  );\n};\n\nexport default MyEditor;\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { useState } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport Fab from \"@material-ui/core/Fab\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport Zoom from \"@material-ui/core/Zoom\";\nimport { Button } from \"@material-ui/core\";\nimport NightsStayIcon from \"@material-ui/icons/NightsStay\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"fixed\",\n    bottom: theme.spacing(1),\n    right: theme.spacing(2),\n    minHeight: \"10px\",\n  },\n}));\n\nfunction ScrollTop(props) {\n  const { children, window } = props;\n  const classes = useStyles();\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({\n    target: window ? window() : undefined,\n    disableHysteresis: true,\n    threshold: 100,\n  });\n\n  const handleClick = (event) => {\n    const anchor = (event.target.ownerDocument || document).querySelector(\n      \"#back-to-top-anchor\"\n    );\n\n    if (anchor) {\n      anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n    }\n  };\n\n  return (\n    <Zoom in={trigger}>\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\n        {children}\n      </div>\n    </Zoom>\n  );\n}\n\nexport default function BackToTop(props) {\n  const curTheme = props.curTheme;\n  // 0 = white, 1 = dark\n  const [icon, setIcon] = useState(curTheme === \"dark\");\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar color=\"white\">\n        <Toolbar>\n          <Typography variant=\"h6\">StagBIN</Typography>\n          <Button\n            style={{ position: \"fixed\", right: \"0\" }}\n            color=\"inherit\"\n            onClick={() => {\n              props.toggle();\n              setIcon(!icon);\n            }}\n          >\n            {icon ? <WbSunnyIcon /> : <NightsStayIcon />}\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <Toolbar id=\"back-to-top-anchor\" />\n      <ScrollTop {...props}>\n        <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\n          <KeyboardArrowUpIcon />\n        </Fab>\n      </ScrollTop>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    bottom: 0,\n    top: \"auto\",\n  },\n  toolbar: {\n    minHeight: \"20px\",\n  },\n}));\n\nexport default function BottomAppBar() {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"fixed\" color=\"white\" className={classes.appBar}>\n        <Toolbar className={classes.toolbar}>\n          <Link to=\"/\" className=\"navbar-brand\">\n            {\" \"}\n            <small style={{ color: \"black\" }}>\n              &copy; Copyright 2021, vjspranav\n            </small>{\" \"}\n          </Link>{\" \"}\n        </Toolbar>\n      </AppBar>\n    </React.Fragment>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n    transition: all 0.50s linear;\n  }\n  `;\n","export const lightTheme = {\n  body: \"#FFF\",\n  text: \"#363537\",\n  toggleBorder: \"#FFF\",\n  background: \"#363537\",\n};\n\nexport const darkTheme = {\n  body: \"#363537\",\n  text: \"#FAFAFA\",\n  toggleBorder: \"#6B8096\",\n  background: \"#999\",\n};\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport MyEditor from \"./components/MyEditor\";\n// import TopBar from \"./components/Topbar\";\n// import BottomBar from \"./components/BottomBar\";\nimport TopAppBar from \"./components/TopAppBar\";\nimport BottomAppBar from \"./components/BottomAppBar\";\n\n// For Theme\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyles } from \"./components/GlobalStyles\";\nimport { lightTheme, darkTheme } from \"./components/Themes\";\n\nfunction App() {\n  let localTheme = localStorage.getItem(\"theme\");\n  const [theme, setTheme] = useState(localTheme ? localTheme : \"light\");\n  const themeToggler = () => {\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n    localStorage.setItem(\"theme\", theme === \"light\" ? \"dark\" : \"light\");\n  };\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <>\n        <GlobalStyles />\n        <div className=\"App\" style={{ paddingBottom: \"20px\" }}>\n          <Router basename={process.env.PUBLIC_URL}>\n            <div>\n              <TopAppBar toggle={themeToggler} curTheme={theme} />\n            </div>\n            <Switch>\n              <Route exact path=\"/\">\n                <MyEditor />\n              </Route>\n              <Route path=\"/:id\">\n                <MyEditor />\n              </Route>\n            </Switch>\n            <div>\n              <BottomAppBar curTheme={theme} />\n            </div>\n          </Router>\n        </div>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}